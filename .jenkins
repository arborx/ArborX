pipeline {
    agent {
        label 'DoNotRunAnythingOnMaster'
    }
    environment {
        CCACHE_DIR = '/tmp/ccache'
        CCACHE_MAXSIZE = '10G'
        ARBORX_DIR = '/opt/arborx'
    }
    stages {
        stage('Build') {
            parallel {
                stage('Clang') {
                    agent {
                        dockerfile {
                            filename "Dockerfile"
                            dir "docker"
                            additionalBuildArgs '--build-arg BASE=ubuntu:18.04 --build-arg KOKKOS_OPTIONS="-DCMAKE_CXX_STANDARD=14 -DKOKKOS_ENABLE_SERIAL=ON -DKOKKOS_ENABLE_OPENMP=ON -DCMAKE_CXX_COMPILER=clang++ -DKOKKOS_ARCH=AMDAVX" --build-arg KOKKOS_VERSION=f8641d015f371afb6cb49a97545d4e87dda7c5af'
                            args '-v /tmp/ccache:/tmp/ccache'
                            label 'cathode'
                        }
                    }
                    steps {
                        sh 'ccache --zero-stats'
                        sh 'rm -rf build && mkdir -p build && cd build && cmake -D Kokkos_DEVICES="Serial OpenMP" -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER=clang++ -D CMAKE_PREFIX_PATH="$KOKKOS_DIR/lib;$BOOST_DIR;$BENCHMARK_DIR" -D ArborX_ENABLE_MPI=ON -D MPIEXEC_PREFLAGS="--allow-run-as-root" .. && make -j8 VERBOSE=1 && ctest --no-compress-output -T Test'
                    }
                    post {
                        always {
                            sh 'ccache --show-stats'
                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
                        }
                    }
                }
            }
        }
        stage("Style") {
            agent {
                docker {
                    // arbitrary image that has clang-format version 7.0
                    image "dalg24/arborx_base:19.04.0-cuda-9.2"
                    label 'docker'
                }
            }
            steps {
                sh './scripts/check_format_cpp.sh'
            }
        }
    }
}
